---
name: "Create Release"
description: "A reusable action to create a GitHub release."
author: "LizardByte"
inputs:
  allowUpdates:
    description: 'An optional flag which indicates if we should update a release if it already exists.'
    required: false
    default: 'true'
  artifactErrorsFailBuild:
    description: 'An optional flag which indicates if we should fail the build if there are errors with the artifacts.'
    required: false
    default: 'false'
  artifacts:
    description: 'The artifacts to upload.'
    required: false
    default: '*artifacts/*'
  body:
    description: 'The body of the release.'
    required: false
    default: ''
  deleteOtherPreReleases:
    description: 'Whether to delete other pre-releases.'
    required: false
    default: 'true'
  deletePreReleaseTags:
    description: 'Whether to delete other pre-releases tags.'
    required: false
    default: 'true'
  discussionCategory:
    description: 'The category of the discussion.'
    required: false
    default: 'announcements'
  generateReleaseNotes:
    description: 'Indicates if release notes should be automatically generated.'
    required: false
    default: 'true'
  keepPreReleaseCount:
    description: 'The number of pre-releases to keep. The default is 2 incase there are in process downloads.'
    required: false
    default: '2'
  name:
    description: 'The version to create.'
    required: true
  prerelease:
    description: 'Whether the release is a prerelease.'
    required: false
    default: 'true'
  tag:
    description: 'The tag to create.'
    required: true
  token:
    description: 'Github Token.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Create/Update GitHub Release
      if: >-
        github.repository == 'LizardByte/create-release-action' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/master')
      uses: ncipollo/release-action@v1.14.0
      with:
        allowUpdates: ${{ inputs.allowUpdates }}
        artifactErrorsFailBuild: ${{ inputs.artifactErrorsFailBuild }}
        artifacts: ${{ inputs.artifacts }}
        body: ${{ inputs.body }}
        commit: ${{ github.sha }}
        discussionCategory: ${{ inputs.discussionCategory }}
        generateReleaseNotes: ${{ inputs.generateReleaseNotes }}
        name: ${{ inputs.name }}
        prerelease: ${{ inputs.prerelease }}
        tag: ${{ inputs.tag }}
        token: ${{ inputs.token }}

    - name: Sleep
      # wait for the new release to be available in the API
      if: >-
        inputs.deleteOtherPreReleases == 'true' &&
        (github.event_name == 'push' && github.ref == 'refs/heads/master')
      shell: bash
      run: sleep 30

    - name: Delete Other PreReleases
      if: >-
        inputs.deleteOtherPreReleases == 'true' &&
        (github.event_name == 'push' && github.ref == 'refs/heads/master')
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        keep_latest: ${{ inputs.keepPreReleaseCount }}
        delete_prerelease_only: true
        delete_tag_pattern: v(\d{4,})\.(\d{1,4})\.(\d{1,6})(\.(\d{1,2}))?
        delete_tags: ${{ inputs.deletePreReleaseTags }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
